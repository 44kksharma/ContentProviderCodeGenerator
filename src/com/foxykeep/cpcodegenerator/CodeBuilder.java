/**
 * 
 */
package com.foxykeep.cpcodegenerator;

import java.util.HashSet;
import java.util.Set;

/**
 * @author marks
 */
public class CodeBuilder {

    private static final String INDENT_STRING = "    ";

    private static final String[] GENERATED_CODE_TEXT = {
            "/**", " * This class was generated by FunzioCodeGenerator", " */"
    };
    private static final int GENERATED_CODE_TEXT_LENGTH = GENERATED_CODE_TEXT.length;

    private StringBuilder mSb = new StringBuilder();

    private String mClassPackage;
    private int mCount;
    private int mIndent;
    private StringBuilder mSbHeader;
    private StringBuilder mSbContent;
    private Set<String> mImportSet;

    public CodeBuilder(final String packageName, final String className, final String superClassName) {
        this(packageName, className, superClassName, false);
    }

    public CodeBuilder(final String packageName, final String className, final String superClassName, final boolean isAbstract) {
        mClassPackage = packageName;
        mImportSet = new HashSet<String>();

        mSbHeader = new StringBuilder();
        mSbHeader.append("package ").append(packageName).append(";\n\n");

        mSbContent = new StringBuilder();
        for (int i = 0; i < GENERATED_CODE_TEXT_LENGTH; i++) {
            addLine(GENERATED_CODE_TEXT[i]);
        }
        addNewLine();
        startClass(className, superClassName, null, true, false, false, isAbstract);
    }

    public void startClass(final String className, final String superClassName, final String interfaceName, final boolean isPublic, final boolean isStatic, final boolean isFinal,
            final boolean isAbstract) {
        addLine("%1$s%2$s%3$s%4$s class %5$s%6$s%7$s {\n", isPublic ? "public " : "private ", isStatic ? "static " : "", isFinal ? "final " : "", isAbstract ? "abstract" : "", className,
                superClassName != null ? " extends " + superClassName : "", interfaceName != null ? " implements " + interfaceName : "");
        indent();
    }

    public void endClass() {
        endMethod();
    }

    public void startInterface(final String interfaceName) {
        addLine("public interface %1$s {\n", interfaceName);
        indent();
    }

    public void endInterface() {
        endMethod();
    }

    public void addFieldCustom(final boolean isPublic, final boolean isStatic, final boolean isFinal, String type, final String name, final String value) {
        final int bracketIndex = type.lastIndexOf('[');
        String importType = bracketIndex != -1 ? type.substring(0, bracketIndex) : type;
        if (importType.equals("date")) {
            addImport("java.util.Date");
            type = "Date";
        } else if (type.equals("string") || type.equals("String")) {
            type = "String";
        } else if (!importType.equals("int") && !importType.equals("long") && !importType.equals("float") && !importType.equals("boolean")) {
            addImport(importType);
            type = type.substring(type.lastIndexOf('.') + 1);
        }
        addLine("%1$s %2$s%3$s%4$s %5$s%6$s;", isPublic ? "public" : "private", isStatic ? "static " : "", isFinal ? "final " : "", type, name, value != null ? " = " + value : "");
    }

    public CodeBuilder addImport(final String importPath) {
        if (!importPath.substring(0, importPath.lastIndexOf('.')).equals(mClassPackage)) {
            mImportSet.add(importPath);
        }
        return this;
    }

    public CodeBuilder addNewLine() {
        mSbContent.append("\n");
        return this;
    }

    public CodeBuilder addLine(final String line) {
        appendIndent();
        mSbContent.append(line).append("\n");
        return this;
    }

    public CodeBuilder addLine(final String line, final Object... args) {
        appendIndent();
        mSbContent.append(String.format(line, args)).append("\n");
        return this;
    }

    public String createNewVar(final String prefix) {
        return prefix + mCount++;
    }

    public void startIf(final String condition, final Object... args) {
        addLine("if (" + condition + ") {", args);
        indent();
    }

    public CodeBuilder endIf() {
        dedent();
        addLine("}");
        return this;
    }

    public void addPrivateConstructor(final String className) {
        addLine("private %1$s() {", className);
        indent();
        endMethod();
    }

    public void startConstructor(final String className, final String... args) {
        addLine("public %1$s(%2$s) {", className, joinParamsArray(args));
        indent();
    }

    public void endConstructor() {
        endMethod();
    }

    public void startEnum(final boolean isPublic, final boolean isStatic, final String name) {
        addLine("%1$s%2$s enum %3$s {", isPublic ? "public" : "private", isStatic ? " static" : "", name);
        indent();
    }

    public void endEnum() {
        endMethod();
    }

    public void startMethod(final String returnType, final String methodName, final String... args) {
        startMethod(false, returnType, methodName, args);
    }

    public void startMethod(final boolean isStatic, final String returnType, final String methodName, final String... args) {
        mCount = 0;
        addLine("public %1$s%2$s %3$s(%4$s) {", isStatic ? "static " : "", returnType, methodName, joinParamsArray(args));
        indent();
    }

    public void endMethod() {
        dedent();
        addLine("}\n");
    }

    public void startForEach(final String elemType, final String elemName, final String listName) {
        addLine("for (%1$s %1$s : %1$s)", elemType, elemName, listName);
        indent();
    }

    public CodeBuilder endForEach() {
        dedent();
        addLine("}");
        return this;
    }

    private void indent() {
        mIndent++;
    }

    private void dedent() {
        mIndent--;
    }

    private void appendIndent() {
        for (int i = 0; i < mIndent; i++) {
            mSbContent.append(INDENT_STRING);
        }
    }

    public void addCode(final String code) {
        mSbContent.append(code);
    }

    public String getCode() {
        for (String importPath : mImportSet) {
            mSbHeader.append("import ").append(importPath).append(";\n");
        }

        return mSbHeader.append("\n").append(mSbContent.toString()).toString();
    }

    public String joinParamsArray(final String[] valueArray) {
        mSb.setLength(0);
        final int valueArrayLength = valueArray.length;

        for (int i = 0; i < valueArrayLength; i++) {
            mSb.append(valueArray[i]);
            if (i != valueArrayLength - 1) {
                mSb.append(", ");
            }
        }

        return mSb.toString();
    }
}
